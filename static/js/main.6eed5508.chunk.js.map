{"version":3,"sources":["reducer/todos.js","App.js","action/index.js","serviceWorker.js","reducer/index.js","index.js"],"names":["todosList","counter","loading","data","id","title","completed","error","App","state","useSelector","todos","dispatch","useDispatch","className","map","items","key","type","value","onChange","e","target","checked","style","width","onClick","number","console","log","Boolean","window","location","hostname","match","AllReducers","combineReducers","action","item","parseInt","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6eed5508.chunk.js","sourcesContent":["\r\nconst todosList = {\r\n    counter: 0,\r\n    loading: false,\r\n    data: [\r\n        { id: 1, title: \"Delectus aut autem\", completed: false },\r\n        { id: 2, title: \"Wuis ut nam facilis et officia qui\", completed: false },\r\n        { id: 3, title: \"Fugiat veniam minus\", completed: false },\r\n        { id: 4, title: \"Et porro tempora\", completed: true },\r\n        { id: 5, title: \"Luasi adipisci quia provident illum\", completed: false },\r\n        { id: 6, title: \"Qui ullam ratione quibusdam voluptatem quia omnis\", completed: false },\r\n        { id: 7, title: \"Epedita consequatur quia in\", completed: false },\r\n        { id: 8, title: \"Adipisci enim quam ut ab\", completed: true },\r\n        { id: 9, title: \"Molestiae perspiciatis ipsa\", completed: false },\r\n        { id: 10, title: \"Est ratione doloremque quia maiores aut\", completed: true }\r\n    ],\r\n    error: ''\r\n}\r\nexport default function todos(state = todosList, action) {\r\n    switch (action.type) {\r\n        case \"CHANGE_COMPLETED\":\r\n            return {\r\n                ...state,\r\n                completed: state.data.map(item => item.id === parseInt(action.id) && (item.completed = action.checked))\r\n            }\r\n        case \"INCREMENT\":\r\n            return {\r\n                ...state,\r\n                counter: state.counter >=100 ? 100 : state.counter + action.data\r\n            }\r\n        case \"DECREMENT\":\r\n            return {\r\n                ...state,\r\n                counter: state.counter <=1 ? 0 : state.counter - action.data\r\n            }\r\n        default:\r\n            return {\r\n                ...state,\r\n            }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport './assets/css/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeCompleted, increment, decrement } from './action'\nimport todos from './reducer/todos';\n\nfunction App() {\n  const state = useSelector(state => state)\n  const data = state.todos.data;\n  const counter = state.todos.counter\n  const dispatch = useDispatch();\n  return (\n    <div className=\"\">\n\n      <div className=\"bg-secondary\">\n        <div className=\"container\">\n          <h4 className=\"m-0 pt-3 text-white pb-3 mb-3\">React + Redux</h4>\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ul className=\"ullist\">\n              {data.map(items => {\n                return (\n                  <li key={items.id} className={items.completed ? \"bg-gray\" : \"bg-light\"} >\n                    <label>\n                      <input type=\"checkbox\" value={items.id}\n                        onChange={(e) => dispatch(changeCompleted(e.target.value, e.target.checked))} checked={items.completed} />\n                  &nbsp;{items.title}</label>\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n          <div className=\"col-md-6\">\n            <h4>Width : {counter}%</h4>\n            <div className=\"progress_bar\">\n              <span style={{ width: `${counter}%` }}></span>\n            </div>\n            <hr />\n            <div className=\"btn-group\">\n              <button type=\"button\" className=\"btn btn-success\" onClick={() => dispatch(increment(10))}>\n                <i className=\"fa fa-plus\"></i>\n              </button>\n              <button type=\"button\" className=\"btn btn-success\" onClick={() => dispatch(decrement(10))}>\n                <i className=\"fa fa-minus\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const changeCompleted = (id, checked) => {\r\n    return {\r\n        type: \"CHANGE_COMPLETED\",\r\n        id: id,\r\n        checked: checked\r\n    }\r\n}\r\n\r\nexport const increment = (number) => {\r\n    console.log(number)\r\n    return {\r\n        type: \"INCREMENT\",\r\n        data: number\r\n    }\r\n}\r\n\r\nexport const decrement = (number) => {\r\n    return {\r\n        type: \"DECREMENT\",\r\n        data: number\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import todos from './todos';\r\nimport { combineReducers } from 'redux'\r\n\r\nconst AllReducers = combineReducers({\r\n    todos: todos\r\n})\r\n\r\nexport default AllReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport AllReducers from './reducer'\nconst store = createStore(AllReducers,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}